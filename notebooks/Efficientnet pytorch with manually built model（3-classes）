{"cells":[{"cell_type":"markdown","metadata":{"id":"GG8n8JkZT_mE"},"source":["# Load package"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":37753,"status":"ok","timestamp":1680699278400,"user":{"displayName":"杨思哲","userId":"09738222916716147105"},"user_tz":-480},"id":"2Wh4t_qrT9ot","outputId":"8951050b-4239-4888-9146-2d3f82ab2160"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","import os\n","os.chdir('/content/drive/My Drive/DSA5204/Project/ysz')\n","from model import efficientnet"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11657,"status":"ok","timestamp":1680699290053,"user":{"displayName":"杨思哲","userId":"09738222916716147105"},"user_tz":-480},"id":"KVWY3T_uKPU6","outputId":"3c086388-169a-40c7-84ed-677ae7131390"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting xlwt\n","  Downloading xlwt-1.3.0-py2.py3-none-any.whl (99 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m100.0/100.0 KB\u001b[0m \u001b[31m3.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: xlwt\n","Successfully installed xlwt-1.3.0\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting ptflops\n","  Downloading ptflops-0.6.9.tar.gz (12 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: torch in /usr/local/lib/python3.9/dist-packages (from ptflops) (2.0.0+cu118)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.9/dist-packages (from torch->ptflops) (3.1.2)\n","Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.9/dist-packages (from torch->ptflops) (2.0.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.9/dist-packages (from torch->ptflops) (3.0)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.9/dist-packages (from torch->ptflops) (4.5.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.9/dist-packages (from torch->ptflops) (1.11.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.9/dist-packages (from torch->ptflops) (3.10.7)\n","Requirement already satisfied: lit in /usr/local/lib/python3.9/dist-packages (from triton==2.0.0->torch->ptflops) (16.0.0)\n","Requirement already satisfied: cmake in /usr/local/lib/python3.9/dist-packages (from triton==2.0.0->torch->ptflops) (3.25.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.9/dist-packages (from jinja2->torch->ptflops) (2.1.2)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.9/dist-packages (from sympy->torch->ptflops) (1.3.0)\n","Building wheels for collected packages: ptflops\n","  Building wheel for ptflops (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ptflops: filename=ptflops-0.6.9-py3-none-any.whl size=11711 sha256=2050612b518d18a209c6b487b557fe5ebce36f0a0bbe0f136d66c5f03e241dd1\n","  Stored in directory: /root/.cache/pip/wheels/86/07/9f/879035d99d7b639bbc564d23fed862a679aee7d1a2dced8c2e\n","Successfully built ptflops\n","Installing collected packages: ptflops\n","Successfully installed ptflops-0.6.9\n"]}],"source":["!pip install xlwt\n","!pip install ptflops"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":1406,"status":"ok","timestamp":1680699355651,"user":{"displayName":"杨思哲","userId":"09738222916716147105"},"user_tz":-480},"id":"bj_8Z70-TY_g"},"outputs":[],"source":["import torchvision\n","import os\n","import function\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torchvision import transforms\n","from torch.utils.data import Dataset\n","from tqdm import tqdm\n","import copy"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1680699355651,"user":{"displayName":"杨思哲","userId":"09738222916716147105"},"user_tz":-480},"id":"lK6RjYFdTln-","outputId":"846479f5-244f-4dd6-c8da-e40b3da5c371"},"outputs":[{"output_type":"stream","name":"stdout","text":["using cuda:0 device.\n"]}],"source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(\"using {} device.\".format(device))"]},{"cell_type":"markdown","metadata":{"id":"l1JD3EfLUFw_"},"source":["# Load Dataset\n","## For this experiment, we only use \"dog\" and \"cat\" classes in dataset Cifar-10 as a demo."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u1XUkfsSRuhz"},"outputs":[],"source":["img_size = {\"B0\": 224, \"B1\": 240, \"B2\": 260, \"B3\": 300, \"B4\": 380, \"B5\": 456, \"B6\": 528, \"B7\": 600, \"customized\":336}\n","num_model = \"customized\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETL11GNfUgBM"},"outputs":[],"source":["data_transform = {\"train\": transforms.Compose([transforms.RandomResizedCrop(img_size[num_model]),\n","                         transforms.RandomRotation(degrees=(-15, 15)),                      \n","                         transforms.RandomHorizontalFlip(p = 0.5), # Random flip in horizontal direction, with p = 0.5 by default\n","                         transforms.ToTensor(),\n","                         transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))\n","          ]),\n"," \n","          \"val\": transforms.Compose([transforms.Resize(img_size[num_model]),\n","                        transforms.ToTensor(),\n","                        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))\n","          ])}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L61fiF68g1Gs"},"outputs":[],"source":["class CIFAR10TwoClasses(Dataset):\n","  def __init__(self, root, train=True, download=True, transform=data_transform[\"train\"]):\n","    self.datalist = []\n","    self.cifar10 = torchvision.datasets.CIFAR10(root, train=train, download=download, transform=transform)\n","    \n","    for i in range(len(cifar10)):\n","      if cifar10[i][1] == 3: # 3 is the class index for \"cat\"\n","        item_list = list(cifar10[i]) # convert tuple to list\n","        item_list[1] = 0\n","        self.data.append(tuple(item_list))\n","\n","      if cifar10[i][1] == 4: # 4 is the class index for \"cat\"\n","        item_list = list(cifar10[i]) # convert tuple to list\n","        item_list[1] = 1\n","        self.data.append(tuple(item_list))\n","\n","      if cifar10[i][1] == 5: # 5 is the class index for \"dog\"\n","        item_list = list(cifar10[i]) # convert tuple to list\n","        item_list[1] = 2\n","        self.data.append(tuple(item_list))\n","    \n","  def __getitem__(self, index):\n","\n","    return self.data[index]\n","\n","  def __len__(self):\n","    return len(self.data)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cGaZHPFrxdnx"},"outputs":[],"source":["class CIFAR10TwoClasses(Dataset):\n","  def __init__(self, root, train=True, download=True, transform=data_transform[\"train\"]):\n","    self.datalist = []\n","    self.cifar10 = torchvision.datasets.CIFAR10(root, train=train, download=download, transform=transform)\n","    \n","    for i in range(len(self.cifar10)):\n","      if self.cifar10[i][1] == 3: # 3 is the class index for \"cat\"\n","        self.datalist.append(i)\n","      \n","\n","      if self.cifar10[i][1] == 4: # 4 is the class index for \"cat\"\n","        self.datalist.append(i)\n","\n","      if self.cifar10[i][1] == 5: # 5 is the class index for \"dog\"\n","        self.datalist.append(i)\n","      \n","    \n","  def __getitem__(self, index):\n","    item_index = self.datalist[index]\n","    data = self.cifar10[item_index][0]\n","    label = self.cifar10[item_index][1]\n","    if label == 3:\n","      true_label = 0\n","    elif label == 4:\n","      true_label = 1\n","    else:\n","      true_label = 2\n","    return data, true_label\n","\n","  def __len__(self):\n","    return len(self.datalist)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hcvPQBb2g1I_","outputId":"6d6a5c24-23ee-4a47-cb52-cf46157a2450"},"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n","Files already downloaded and verified\n"]}],"source":["train_dataset = CIFAR10TwoClasses(root='./data/CIFAR10', train=True, download=True, transform=data_transform[\"train\"])\n","val_dataset = CIFAR10TwoClasses(root='./data/CIFAR10', train=False, download=True, transform=data_transform[\"val\"])"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"H9U1b6ELeFIw","executionInfo":{"status":"ok","timestamp":1680699391632,"user_tz":-480,"elapsed":2,"user":{"displayName":"杨思哲","userId":"09738222916716147105"}}},"outputs":[],"source":["epochs = 40\n","save_model = '/content/drive/My Drive/DSA5204/Project/ysz/res/best_model.pth'\n","save_path = '/content/drive/My Drive/DSA5204/Project/ysz/res/'\n","batch_size = 16\n","num_classes = 3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fMb05_m8VEBT"},"outputs":[],"source":["train_num = len(train_dataset)\n","val_num = len(val_dataset)\n","print(\"using {} images for training, {} images for validation.\".format(train_num, val_num))\n"," \n","nw = min([os.cpu_count(), batch_size if batch_size > 1 else 0, 8])  # number of workers\n","print('Using {} dataloader workers every process'.format(nw))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n0XxYEVyVZFq"},"outputs":[],"source":["train_loader = torch.utils.data.DataLoader(train_dataset, \n","                       batch_size=batch_size,\n","                       shuffle=True,\n","                       pin_memory=True,\n","                       num_workers=nw)\n"," \n","val_loader = torch.utils.data.DataLoader(val_dataset,\n","                      batch_size=batch_size,\n","                      shuffle=False,\n","                      pin_memory=True,\n","                      num_workers=nw)"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"veEvKdCCTLOW","executionInfo":{"status":"ok","timestamp":1680699853342,"user_tz":-480,"elapsed":3,"user":{"displayName":"杨思哲","userId":"09738222916716147105"}}},"outputs":[],"source":["model_b0 = efficientnet(width_coefficient=1,  \n","            depth_coefficient=1, \n","            dropout_rate=0.2, \n","            num_classes=num_classes).to(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K9i2HNkhVuCT"},"outputs":[],"source":["loss_function = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model_b0.parameters(), lr=0.01)\n","best_acc = 0.0\n","train_acc_list = []\n","train_loss_list = []\n","val_acc_list = []"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"cIUJYkmAV9AG","outputId":"d9446455-26b3-45b2-9438-1ebda7cb6b18"},"outputs":[{"name":"stderr","output_type":"stream","text":[" 21%|██▏       | 200/938 [01:52<06:35,  1.87it/s]"]}],"source":["for epoch in range(epochs):\n","  # train\n","  model_b0.train()\n","  running_loss_train = 0.0\n","  train_accurate = 0.0\n","  train_bar = tqdm(train_loader) # visualize the training progress\n","  for images, labels in train_bar:\n","    optimizer.zero_grad()\n","    outputs = model_b0(images.to(device))\n","    loss = loss_function(outputs, labels.to(device))\n","    loss.backward()\n","    optimizer.step()\n","\n","    predict = torch.max(outputs, dim=1)[1]\n","    train_accurate += torch.eq(predict, labels.to(device)).sum().item()\n","    running_loss_train += loss.item()\n","  \n","  train_accurate = train_accurate / train_num\n","  running_loss_train = running_loss_train / train_num\n","  train_acc_list.append(train_accurate)\n","  train_loss_list.append(running_loss_train)\n"," \n","  print('[epoch %d] train_loss: %.7f  train_accuracy: %.3f' %(epoch + 1, running_loss_train, train_accurate))\n","\n","\n","  # validate\n","  model_b0.eval()\n","  acc = 0.0  # accumulate accurate number / epoch\n","  with torch.no_grad():\n","    val_loader = tqdm(val_loader)\n","    for val_data in val_loader:\n","      val_images, val_labels = val_data\n","      outputs = model_b0(val_images.to(device))\n","      predict_y = torch.max(outputs.float(), dim=1)[1]\n","      acc += torch.eq(predict_y, val_labels.to(device)).sum().item()\n","  val_accurate = acc / val_num\n","  val_acc_list.append(val_accurate)\n","  print('[epoch %d] val_accuracy: %.3f' %(epoch + 1, val_accurate))\n","  function.writer_into_excel_onlyval(save_path, train_loss_list, train_acc_list, val_acc_list, None, \"CIFAR-10\")\n","\n","  # Save the best model based on acc\n","  if val_accurate > best_acc:\n","    best_acc = val_accurate\n","    torch.save(model_b0.state_dict(), save_model)"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"KZ-6mbPNRxlT","executionInfo":{"status":"ok","timestamp":1680699420120,"user_tz":-480,"elapsed":3,"user":{"displayName":"杨思哲","userId":"09738222916716147105"}}},"outputs":[],"source":["from ptflops import get_model_complexity_info"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"H_6qC4NoJKkO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680699868203,"user_tz":-480,"elapsed":3,"user":{"displayName":"杨思哲","userId":"09738222916716147105"}},"outputId":"438bfc09-4c7e-40b1-cb6a-06b23720176a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Warning: module SiLU is treated as a zero-op.\n","Warning: module ConvBNActivation is treated as a zero-op.\n","Warning: module Sigmoid is treated as a zero-op.\n","Warning: module SqueezeExcitation is treated as a zero-op.\n","Warning: module Identity is treated as a zero-op.\n","Warning: module InvertedResidual is treated as a zero-op.\n","Warning: module DropPath is treated as a zero-op.\n","Warning: module Dropout is treated as a zero-op.\n","Warning: module EfficientNet is treated as a zero-op.\n","Computational complexity:       922.79 MMac\n","Number of parameters:           4.01 M  \n"]}],"source":["macs, params = get_model_complexity_info(model_b0, (3, 336, 336), as_strings=True,\n","                      print_per_layer_stat=False, verbose=True)\n","print('{:<30}  {:<8}'.format('Computational complexity: ', macs))\n","print('{:<30}  {:<8}'.format('Number of parameters: ', params))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F9pmuzUTKByH"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"machine_shape":"hm","provenance":[]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}